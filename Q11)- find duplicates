APPROACH-1: slow and fast solution
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow=0, fast=0;
        while(true)
        {
            fast=nums[nums[fast]]; //fast will move 2 steps ahead
            slow=nums[slow]; //slow will move 1 step ahead
            if(slow==fast) break; //cycle detected
        }
        slow=0; //make slow reach beginning of vector 
        while(slow!=fast)
        { //now move each slow and fast one by one
            slow=nums[slow];
            fast=nums[fast];
        }
        return fast;
    }
};

APPROACH-2: using absolute value
class Solution {
public:
    int findDuplicate(vector<int>& arr) {
        int n = arr.size();
        for(int i=0;i<n;i++){
            int temp = abs(arr[i]);
            arr[temp-1] = -arr[temp-1];
            if(arr[temp-1] > 0) return temp;
        }     
        return -1;   
    }
};
